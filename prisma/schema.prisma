generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BaseTechnician {
  id           Int      @id @default(autoincrement())
  technicianId Int
  createdAt    DateTime @default(now())
}

model InternalOS {
  id        Int      @id @default(autoincrement())
  setorId   String
  tecnicoId Int
  problema  String
  descricao String
  createdAt DateTime @default(now())
  email     String   @default("Não enviado")
  assinado  String?
  cpf       String?
  peca      String   @default("---------")
  status    String   @default("Pendente")
  updatedAt DateTime @updatedAt
}

model Item {
  id             Int              @id @default(autoincrement())
  name           String
  brand          String
  serialNumber   String           @unique
  userId         String
  schoolId       Int?
  status         String           @default("DISPONIVEL")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  School            School?             @relation(fields: [schoolId], references: [id])
  Profile           Profile             @relation(fields: [userId], references: [userId])
  ItemHistory       ItemHistory[]
  MemorandumItem    MemorandumItem[]
  NewMemorandumItem NewMemorandumItem[]

  @@map("Item")
}

model ItemsChada {
  id        String           @id @default(uuid())
  itemId    Int // ID do item enviado para CHADA
  problem   String // Descrição do problema
  userName  String // Nome do usuário que enviou o item
  status    ItemsChadaStatus @default(PENDENTE) // Status do item (ex: "Pendente", "Resolvido")
  createdAt DateTime         @default(now()) // Data de envio
  updatedAt DateTime         @updatedAt // Data de atualização
  setor     String
  updatedBy String? // Nome do usuário que atualizou o status
  osImages  Json[] // Imagens do OS
}

enum ItemsChadaStatus {
  PENDENTE
  RESOLVIDO
}

model ItemHistory {
  id          Int      @id @default(autoincrement())
  itemId      Int
  fromSchool  String
  toSchool    String
  movedAt     DateTime @default(now())
  generatedBy String?
  Item        Item     @relation(fields: [itemId], references: [id])

  @@index([itemId])
}

model ItemsHistoryChada {
  id         Int      @id @default(autoincrement())
  itemId     Int
  resolvedBy String
  resolvedAt DateTime
  images     String[]
}

model Memorandum {
  id             Int              @id @default(autoincrement())
  number         String           @unique // Número do memorando
  schoolName     String
  district       String
  generatedBy    String
  type           String           @default("entrega") // NOVO: tipo do memorando
  fromSchoolName String? // NOVO: escola de origem (para troca)
  toSchoolName   String? // NOVO: escola de destino (para troca)
  items          MemorandumItem[] // Relacionamento com MemorandumItem
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model MemorandumItem {
  id           Int        @id @default(autoincrement())
  memorandumId Int
  itemId       Int
  createdAt    DateTime   @default(now())
  Item         Item       @relation(fields: [itemId], references: [id])
  Memorandum   Memorandum @relation(fields: [memorandumId], references: [id])

  @@unique([memorandumId, itemId])
}

model OffTechnician {
  id           Int      @id @default(autoincrement())
  technicianId Int
  createdAt    DateTime @default(now())
}

model Os {
  id                        Int      @id @default(autoincrement())
  unidadeEscolar            String
  tecnicoResponsavel        String
  numeroOs                  String   @unique
  data                      String
  hora                      String
  notebooksOutroLocal       String
  tabletsOutroLocal         String
  solicitacaoDaVisita       String
  relatorio                 String
  pcsSieduca                String
  notebooksSieduca          String
  tabletsSieduca            String
  estabilizadoresSieduca    String
  naoHaSieduca              String
  dellSecretaria            String
  locadosSecretaria         String
  outrosSecretaria          String
  notebooksSecretaria       String
  tabletsSecretaria         String
  estabilizadoresSecretaria String
  dellOutroLocal            String
  locadosOutroLocal         String
  outrosOutroLocal          String
  estabilizadoresOutroLocal String
  naoHaOutroLocal           String
  redeBr                    String
  internetNasEscolas        String
  educacaoConectada         String
  naoHaProvedor             String
  rack                      String
  switch                    String
  roteador                  String
  oki                       String
  kyocera                   String
  hp                        String   @default("0")
  ricoh                     String   @default("0")
  outrasImpressoras         String
  solucionado               String
  emailResponsavel          String
  fotosAntes                String[]
  fotosDepois               String[]
  status                    String   @default("Pendente")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now()) @updatedAt
}

model OsAssinada {
  id                        Int      @id @default(autoincrement())
  unidadeEscolar            String
  tecnicoResponsavel        String
  numeroOs                  String   @unique
  data                      String
  hora                      String
  notebooksOutroLocal       String
  tabletsOutroLocal         String
  solicitacaoDaVisita       String
  relatorio                 String
  pcsSieduca                String
  notebooksSieduca          String
  tabletsSieduca            String
  estabilizadoresSieduca    String
  naoHaSieduca              String
  dellSecretaria            String
  locadosSecretaria         String
  outrosSecretaria          String
  notebooksSecretaria       String
  tabletsSecretaria         String
  estabilizadoresSecretaria String
  dellOutroLocal            String
  locadosOutroLocal         String
  outrosOutroLocal          String
  estabilizadoresOutroLocal String
  naoHaOutroLocal           String
  redeBr                    String
  internetNasEscolas        String
  educacaoConectada         String
  naoHaProvedor             String
  rack                      String
  switch                    String
  roteador                  String
  oki                       String
  kyocera                   String
  hp                        String   @default("0")
  ricoh                     String   @default("0")
  outrasImpressoras         String
  solucionado               String
  emailResponsavel          String
  status                    String   @default("Pendente")
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime
  fotoAntes                 String?
  fotoDepois                String?
  nameAssigned              String
  cpfOrRegistration         String
  fotosAntes                String[]
  fotosDepois               String[]
}

model Printer {
  id         Int    @id @default(autoincrement())
  sigla      String
  setor      String
  modelo     String
  fabricante String
  serial     String @unique
  ip         String
}

model Profile {
  id          Int     @id @default(autoincrement())
  userId      String  @unique
  displayName String
  photoUrl    String?
  role        Role    @default(TECH)
  schoolId    Int     @default(225) // Campo obrigatório para vincular usuário a uma escola (CSDT)
  Item        Item[]
  School      School  @relation(fields: [schoolId], references: [id])
}

model School {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  inep          Int             @default(0)
  district      String?
  address       String?
  director      String?
  phone         String?
  email         String?
  students      Int?            @default(0)
  Item          Item[]
  SchoolDemand  SchoolDemand[]
  ScheduleEvent ScheduleEvent[]
  Profile       Profile[]       // Relacionamento com usuários vinculados
}

model SchoolDemand {
  id        Int      @id @default(autoincrement())
  schoolId  Int
  demand    String
  createdAt DateTime @default(now())
  School    School   @relation(fields: [schoolId], references: [id])
}

model ServiceOrder {
  id                             Int       @id @default(autoincrement())
  orderNumber                    String
  visitDate                      DateTime?
  visitTime                      String
  school                         String
  visitResponsible               String
  visitResponsibleRole           String
  visitObjective                 String
  technicians                    String[]
  sieducaDetails                 String[]
  sieducaEquipmentDetails        String?
  secretaryDetails               String[]
  secretaryEquipmentDetails      String?
  otherLocationsDetails          String[]
  otherLocationsEquipmentDetails String?
  internetDetails                String[]
  rackDetails                    String[]
  rackEquipmentDetails           String?
  printerDetails                 String[]
  printerEquipmentDetails        String?
  visitDescription               String
  repairDescription              String
  problemSolved                  String
  reasonNotSolved                String?
  nextTechnicianInstructions     String?
  beforePhotos                   String[]
  afterPhotos                    String[]
  completionDate                 DateTime
  completionTime                 String
  completionResponsible          String
  signedPhoto                    String[]
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
}

model VisitTechnician {
  id           Int      @id @default(autoincrement())
  technicianId Int
  createdAt    DateTime @default(now())
}

enum Role {
  ADMIN
  TECH
  ONLYREAD
  ADMTOTAL
}

model Locados {
  id              Int    @id @default(autoincrement())
  name            String
  pcs             Int?
  notebooks       Int?
  tablets         Int?
  estabilizadores Int?
  monitors        Int?
  impressoras     Int?

  name2            String?
  pcs2             Int?
  notebooks2       Int?
  tablets2         Int?
  estabilizadores2 Int?
  monitors2        Int?
  impressoras2     Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}

model OSExterna {
  id                                 Int      @id @default(autoincrement())
  numeroOs                           String?  @unique
  data                               String
  hora                               String
  unidadeEscolar                     String?
  tecnicoResponsavel                 String?
  emailResponsavel                   String?
  fotosAntes                         String[]
  fotosDepois                        String[]
  pcsProprio                         Int?
  pcsLocado                          Int?
  notebooksProprio                   Int?
  notebooksLocado                    Int?
  monitoresProprio                   Int?
  monitoresLocado                    Int?
  estabilizadoresProprio             Int?
  estabilizadoresLocado              Int?
  tabletsProprio                     Int?
  tabletsLocado                      Int?
  pcsProprioOutrosLocais             Int?
  pcsLocadoOutrosLocais              Int?
  notebooksProprioOutrosLocais       Int?
  notebooksLocadoOutrosLocais        Int?
  monitoresProprioOutrosLocais       Int?
  monitoresLocadoOutrosLocais        Int?
  estabilizadoresProprioOutrosLocais Int?
  estabilizadoresLocadoOutrosLocais  Int?
  tabletsProprioOutrosLocais         Int?
  tabletsLocadoOutrosLocais          Int?
  pecasOuMaterial                    String?
  relatorio                          String?
  solicitacaoDaVisita                String?
  temLaboratorio                     Boolean?
  redeBr                             String?
  educacaoConectada                  String?
  naoHaProvedor                      String?
  rack                               Int?
  switch                             Int?
  roteador                           Int?
  oki                                Int?
  kyocera                            Int?
  hp                                 Int?
  ricoh                              Int?
  outrasImpressoras                  Int?
  solucionado                        String?
  status                             String   @default("Pendente")
  assinado                           String?
  cpf                                String?
  cargoResponsavel                   String?
  lastEmailSent                      DateTime? // Data do último email enviado
  updatedAt                          DateTime @updatedAt
  createdAt                          DateTime @default(now())
}

// Nova tabela para memorandos com numeração automática
model NewMemorandum {
  id             Int                 @id @default(autoincrement())
  number         String              @unique // Número do memorando (formato: sequencial/ano)
  schoolName     String
  district       String
  generatedBy    String
  type           String              @default("entrega") // tipo do memorando (entrega/troca)
  fromSchoolName String? // escola de origem (para troca)
  toSchoolName   String? // escola de destino (para troca)
  items          NewMemorandumItem[] // Relacionamento com NewMemorandumItem
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model NewMemorandumItem {
  id           Int           @id @default(autoincrement())
  memorandumId Int
  itemId       Int
  createdAt    DateTime      @default(now())
  Item         Item          @relation(fields: [itemId], references: [id])
  Memorandum   NewMemorandum @relation(fields: [memorandumId], references: [id])

  @@unique([memorandumId, itemId])
}

// Calendários separados
model Calendar {
  id          Int             @id @default(autoincrement())
  name        String          // Nome do calendário
  description String?         // Descrição
  color       String          @default("#3b82f6") // Cor hexadecimal
  isVisible   Boolean         @default(true) // Se está visível
  isDefault   Boolean         @default(false) // Se é o padrão
  ownerId     String          // Dono do calendário
  isPublic    Boolean         @default(false) // Se é público
  timezone    String          @default("America/Sao_Paulo") // Fuso horário
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  events      ScheduleEvent[] // Eventos deste calendário
  
  @@unique([ownerId, name])
}

// Tabela para agendamentos e tarefas
model ScheduleEvent {
  id            Int               @id @default(autoincrement())
  title         String            // Título do evento/tarefa
  description   String?           // Descrição opcional
  startDate     DateTime          // Data/hora de início
  endDate       DateTime          // Data/hora de fim
  allDay        Boolean           @default(false) // Se é evento de dia inteiro
  type          EventType         @default(TASK) // Tipo do evento
  priority      Priority          @default(MEDIUM) // Prioridade
  status        EventStatus       @default(PENDING) // Status do evento
  createdBy     String            // Usuário que criou
  assignedTo    String?           // Usuário responsável (opcional)
  location      String?           // Local do evento (opcional)
  schoolId      Int?              // Escola relacionada (opcional)
  calendarId    Int               // Calendário que contém este evento
  
  // Eventos recorrentes
  recurring     Boolean           @default(false) // Se é recorrente
  recurrence    Json?             // Padrão de recorrência (JSON)
  parentEventId Int?              // Evento pai (para séries recorrentes)
  isException   Boolean           @default(false) // Se é exceção na recorrência
  
  // Lembretes
  reminders     EventReminder[]   // Lembretes do evento
  
  // Participantes
  participants  EventParticipant[] // Participantes/convidados
  
  // Outros
  attachments   String[]          // Anexos/links
  tags          String[]          // Tags para categorização
  timezone      String            @default("America/Sao_Paulo") // Fuso horário
  url           String?           // URL relacionada
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  School        School?           @relation(fields: [schoolId], references: [id])
  Calendar      Calendar          @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  ParentEvent   ScheduleEvent?    @relation("EventRecurrence", fields: [parentEventId], references: [id])
  ChildEvents   ScheduleEvent[]   @relation("EventRecurrence")

  @@index([startDate, endDate])
  @@index([createdBy])
  @@index([assignedTo])
  @@index([calendarId])
  @@index([parentEventId])
}

// Lembretes de eventos
model EventReminder {
  id        Int           @id @default(autoincrement())
  eventId   Int           // Evento relacionado
  minutes   Int           // Minutos antes do evento (15, 30, 60, etc.)
  type      ReminderType  @default(POPUP) // Tipo do lembrete
  sent      Boolean       @default(false) // Se já foi enviado
  createdAt DateTime      @default(now())
  
  Event     ScheduleEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@index([eventId])
}

// Participantes de eventos
model EventParticipant {
  id          Int                 @id @default(autoincrement())
  eventId     Int                 // Evento relacionado
  email       String              // Email do participante
  name        String?             // Nome do participante
  role        ParticipantRole     @default(ATTENDEE) // Papel no evento
  status      ParticipantStatus   @default(PENDING) // Status de resposta
  isOrganizer Boolean             @default(false) // Se é organizador
  canEdit     Boolean             @default(false) // Se pode editar
  inviteSent  Boolean             @default(false) // Se convite foi enviado
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  Event       ScheduleEvent       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, email])
  @@index([eventId])
  @@index([email])
}

enum EventType {
  TASK          // Tarefa
  MEETING       // Reunião
  APPOINTMENT   // Agendamento/visita técnica
  REMINDER      // Lembrete
  DEADLINE      // Prazo
  MAINTENANCE   // Manutenção
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EventStatus {
  PENDING       // Pendente
  IN_PROGRESS   // Em andamento
  COMPLETED     // Concluído
  CANCELLED     // Cancelado
  POSTPONED     // Adiado
}

enum ReminderType {
  POPUP         // Pop-up na tela
  EMAIL         // Email
  SMS           // SMS (futuro)
  PUSH          // Push notification
}

enum ParticipantRole {
  ORGANIZER     // Organizador
  ATTENDEE      // Participante
  OPTIONAL      // Opcional
  RESOURCE      // Recurso (sala, equipamento)
}

enum ParticipantStatus {
  PENDING       // Aguardando resposta
  ACCEPTED      // Confirmado
  DECLINED      // Recusado
  TENTATIVE     // Talvez
}
